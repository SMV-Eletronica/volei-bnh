<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lista de Presença - Vôlei BNH</title>
    <link rel="icon" type="image/png" sizes="16x16" href="favicon-16x16.png">
    <link rel="icon" type="image/png" sizes="32x32" href="favicon-32x32.png">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f5f5f5;
            color: #333;
        }

        :root {
            --primary: #3498db;
            --success: #27ae60;
            --danger: #e74c3c;
            --text: #2c3e50;
            --muted: #7f8c8d;
        }

        .header {
            background-color: #2c3e50;
            color: white;
            padding: 15px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .header h2 {
            margin: 0;
            color: white;
        }
        .login-btn {
            position: absolute;
            top: 15px;
            right: 20px;
            background-color: #27ae60;
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            transition: background-color 0.3s;
        }
        .login-btn:hover {
            background-color: #219653;
        }

        .container {
            max-width: 1200px;
            margin: 20px auto;
            padding: 0 20px;
        }

        .tabs {
            display: flex;
            border-bottom: 1px solid #ddd;
            margin-bottom: 20px;
        }
        .tab {
            padding: 10px 20px;
            cursor: pointer;
            background-color: #f1f1f1;
            margin-right: 5px;
            border-radius: 5px 5px 0 0;
            transition: background-color 0.3s;
        }
        .tab:hover {
            background-color: #ddd;
        }
        .tab.active {
            background-color: var(--primary);
            color: white;
        }
        .tab-content {
            display: none;
        }
        .tab-content.active {
            display: block;
        }

        .section {
            background-color: white;
            border-radius: 5px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        .section-title {
            margin-top: 0;
            color: var(--text);
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
        }

        .game-controls {
            display: flex;
            gap: 20px;
            margin-bottom: 20px;
            flex-wrap: wrap;
            position: relative;
        }
        .game-controls input, .game-controls button {
            padding: 8px;
            border-radius: 4px;
            border: 1px solid #ddd;
            font-size: 14px;
        }
        .game-controls button {
            background-color: var(--primary);
            color: white;
            border: none;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        .game-controls button:hover {
            background-color: #2980b9;
        }
        .game-controls button:disabled {
            background-color: #ccc;
            cursor: not-allowed;
        }

        .game-list, .waitlist {
            margin-top: 20px;
        }
        .game-list h3, .waitlist h3 {
            margin-bottom: 15px;
            color: var(--text);
        }
        .player-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            border-bottom: 1px solid #eee;
        }
        .player-item:last-child {
            border-bottom: none;
        }
        .player-info {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        .player-photo {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            object-fit: cover;
        }
        .player-name {
            font-weight: bold;
        }
        .player-status {
            font-size: 12px;
            padding: 5px 10px;
            border-radius: 4px;
        }
        .status-pago {
            color: var(--success);
            font-weight: bold;
        }
        .status-inadimplente {
            color: var(--danger);
            font-weight: bold;
        }
        .player-action {
            background-color: var(--danger);
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        .player-action:hover {
            background-color: #c0392b;
        }

        @media (max-width: 768px) {
            .game-controls {
                flex-direction: column;
                gap: 10px;
            }
            .player-item {
                flex-direction: column;
                align-items: flex-start;
                gap: 10px;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h2><i class="fas fa-volleyball-ball" style="color:#3498db;"></i> Vôlei-BNH</h2><b>Lista de Presença</b>
        <button class="login-btn" onclick="window.location.href='restrito.html'"><i class="fas fa-sign-in-alt"></i> Área Restrita</button>
    </div>
    
    <div class="container">
        <div class="tabs">
            <div class="tab active" data-tab="game-list"><i class="fas fa-list"></i> Lista de Presença</div>
        </div>
        
        <div id="game-list" class="tab-content active">
            <div id="content" class="section">
                <h2 class="section-title"><i class="fas fa-volleyball-ball"></i> Gerenciamento de Presença</h2>
                
                <div class="game-controls">
                    <input type="number" id="playerLimit" min="1" placeholder="Limite de jogadores" value="12">
                    <button id="confirmPlayer"><i class="fas fa-check"></i> Confirmar Minha Presença</button>
                </div>
                
                <div class="game-list">
                    <h3>Lista de Confirmados</h3>
                    <div id="confirmedPlayers"></div>
                </div>
                
                <div class="waitlist">
                    <h3>Lista de Espera</h3>
                    <div id="waitlistPlayers"></div>
                </div>
            </div>
        </div>
    </div>

    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getDatabase, ref, get, set, onValue } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-database.js";
        import { getAuth, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";

        // Configuração do Firebase
        const firebaseConfig = {
            apiKey: "AIzaSyAWMgLaPMpNOdPW10S-bVVEiQW-r3QCkxg",
            authDomain: "volei-25301.firebaseapp.com",
            databaseURL: "https://volei-25301-default-rtdb.firebaseio.com",
            projectId: "volei-25301",
            storageBucket: "volei-25301.firebasestorage.app",
            messagingSenderId: "1007197261034",
            appId: "1:1007197261034:web:f2c7ab9cb2793a694cdb93",
            measurementId: "G-CYMLX0SJJQ"
        };

        const app = initializeApp(firebaseConfig);
        const database = getDatabase(app);
        const auth = getAuth(app);

        // Elementos DOM
        const contentDiv = document.getElementById('content');
        const playerLimitInput = document.getElementById('playerLimit');
        const confirmPlayerBtn = document.getElementById('confirmPlayer');
        const confirmedPlayersDiv = document.getElementById('confirmedPlayers');
        const waitlistPlayersDiv = document.getElementById('waitlistPlayers');

        // Variáveis globais
        let playerLimit = parseInt(playerLimitInput.value) || 12;
        let confirmedPlayers = [];
        let waitlistPlayers = [];
        let currentUserPlayer = null;
        let emailLogado = null;

        // Hierarquia de categorias
        const categoryPriority = {
            'MENSAL': 3,
            'DIARISTA': 2,
            'CONVIDADO': 1
        };

        // Função para validar imagem
        async function validateImageUrl(url) {
            if (!url) return false;
            try {
                const response = await fetch(url, { method: 'HEAD' });
                return response.ok && response.headers.get('content-type')?.startsWith('image/');
            } catch {
                return false;
            }
        }

        // Verificar autenticação
        onAuthStateChanged(auth, async (user) => {
            if (!user) {
                window.location.href = 'restrito.html';
            } else {
                emailLogado = user.email;
                await loadCurrentUserPlayer();
                initializeGameList();
            }
        });

        async function loadCurrentUserPlayer() {
            try {
                const playersRef = ref(database, 'players');
                const snapshot = await get(playersRef);
                if (snapshot.exists()) {
                    const players = Object.entries(snapshot.val()).map(([id, player]) => ({
                        id,
                        ...player
                    }));
                    currentUserPlayer = players.find(player => player.email === emailLogado);
                    if (!currentUserPlayer) {
                        alert('Nenhum jogador associado a este email. Contate o administrador.');
                        confirmPlayerBtn.disabled = true;
                    }
                } else {
                    alert('Nenhum jogador encontrado no sistema.');
                    confirmPlayerBtn.disabled = true;
                }
            } catch (error) {
                console.error('Erro ao carregar dados do jogador:', error);
                alert('Erro ao carregar seus dados.');
                confirmPlayerBtn.disabled = true;
            }
        }

        async function initializeGameList() {
            playerLimitInput.addEventListener('change', () => {
                playerLimit = parseInt(playerLimitInput.value) || 12;
                updateGameList();
            });

            confirmPlayerBtn.addEventListener('click', confirmPlayer);

            const gameListRef = ref(database, 'gameList');
            onValue(gameListRef, (snapshot) => {
                const data = snapshot.val() || { confirmed: {}, waitlist: {} };
                confirmedPlayers = Object.entries(data.confirmed || {}).map(([id, player]) => ({
                    id,
                    ...player,
                    timestamp: player.timestamp || Date.now()
                }));
                waitlistPlayers = Object.entries(data.waitlist || {}).map(([id, player]) => ({
                    id,
                    ...player,
                    timestamp: player.timestamp || Date.now()
                }));
                updateGameList();
            });
        }

        async function confirmPlayer() {
            if (!currentUserPlayer) {
                alert('Nenhum jogador associado a este email.');
                return;
            }

            const playerId = currentUserPlayer.id;

            try {
                const playerRef = ref(database, `players/${playerId}`);
                const playerSnapshot = await get(playerRef);
                if (!playerSnapshot.exists()) {
                    alert('Jogador não encontrado.');
                    return;
                }

                const playerData = playerSnapshot.val();
                const playerObj = {
                    id: playerId,
                    name: playerData.name,
                    category: playerData.category || 'CONVIDADO',
                    position: playerData.position || '-',
                    timestamp: Date.now(),
                    paymentStatus: await checkPaymentStatus(playerId),
                    imageUrl: playerData.imageUrl || 'https://via.placeholder.com/40'
                };

                if (confirmedPlayers.some(p => p.id === playerId) || waitlistPlayers.some(p => p.id === playerId)) {
                    alert('Você já confirmou sua presença.');
                    return;
                }

                if (confirmedPlayers.length < playerLimit) {
                    confirmedPlayers.push(playerObj);
                } else {
                    const lowestPriorityPlayer = confirmedPlayers.reduce((lowest, current) =>
                        categoryPriority[current.category] < categoryPriority[lowest.category] ? current : lowest
                    );

                    if (categoryPriority[playerObj.category] > categoryPriority[lowestPriorityPlayer.category]) {
                        confirmedPlayers = confirmedPlayers.filter(p => p.id !== lowestPriorityPlayer.id);
                        waitlistPlayers.push(lowestPriorityPlayer);
                        confirmedPlayers.push(playerObj);
                    } else {
                        waitlistPlayers.push(playerObj);
                    }
                }

                confirmedPlayers.sort((a, b) => {
                    const priorityDiff = categoryPriority[b.category] - categoryPriority[a.category];
                    return priorityDiff !== 0 ? priorityDiff : a.timestamp - b.timestamp;
                });
                waitlistPlayers.sort((a, b) => {
                    const priorityDiff = categoryPriority[b.category] - categoryPriority[a.category];
                    return priorityDiff !== 0 ? priorityDiff : a.timestamp - b.timestamp;
                });

                await updateFirebaseLists();
                updateGameList();

            } catch (error) {
                console.error('Erro ao confirmar presença:', error);
                alert('Erro ao processar confirmação.');
            }
        }

        async function checkPaymentStatus(playerId) {
            try {
                const paymentsRef = ref(database, 'payments');
                const snapshot = await get(paymentsRef);
                const payments = snapshot.val() || {};
                const currentMonth = new Date().toISOString().slice(0, 7);

                const playerPayments = Object.values(payments)
                    .filter(p => p.playerId === playerId && p.month === currentMonth);

                const hasPending = playerPayments.some(p => p.value === 0 || p.value === '0');
                return hasPending ? 'inadimplente' : 'pago';
            } catch (error) {
                console.error('Erro ao verificar status de pagamento:', error);
                return 'inadimplente';
            }
        }

        async function removePlayer(playerId, fromConfirmed = true) {
            if (playerId !== currentUserPlayer?.id) {
                alert('Você só pode remover sua própria presença.');
                return;
            }

            try {
                if (fromConfirmed) {
                    confirmedPlayers = confirmedPlayers.filter(p => p.id !== playerId);
                    if (waitlistPlayers.length > 0 && confirmedPlayers.length < playerLimit) {
                        const highestPriorityPlayer = waitlistPlayers.reduce((highest, current) =>
                            categoryPriority[current.category] > categoryPriority[highest.category] ? current : highest
                        );
                        waitlistPlayers = waitlistPlayers.filter(p => p.id !== highestPriorityPlayer.id);
                        confirmedPlayers.push(highestPriorityPlayer);
                    }
                } else {
                    waitlistPlayers = waitlistPlayers.filter(p => p.id !== playerId);
                }

                confirmedPlayers.sort((a, b) => {
                    const priorityDiff = categoryPriority[b.category] - categoryPriority[a.category];
                    return priorityDiff !== 0 ? priorityDiff : a.timestamp - b.timestamp;
                });
                waitlistPlayers.sort((a, b) => {
                    const priorityDiff = categoryPriority[b.category] - categoryPriority[a.category];
                    return priorityDiff !== 0 ? priorityDiff : a.timestamp - b.timestamp;
                });

                await updateFirebaseLists();
                updateGameList();

            } catch (error) {
                console.error('Erro ao remover jogador:', error);
                alert('Erro ao remover presença.');
            }
        }

        async function updateFirebaseLists() {
            const gameListRef = ref(database, 'gameList');
            const confirmed = {};
            const waitlist = {};

            confirmedPlayers.forEach(player => {
                confirmed[player.id] = {
                    name: player.name,
                    category: player.category,
                    position: player.position,
                    timestamp: player.timestamp,
                    paymentStatus: player.paymentStatus,
                    imageUrl: player.imageUrl
                };
            });

            waitlistPlayers.forEach(player => {
                waitlist[player.id] = {
                    name: player.name,
                    category: player.category,
                    position: player.position,
                    timestamp: player.timestamp,
                    paymentStatus: player.paymentStatus,
                    imageUrl: player.imageUrl
                };
            });

            await set(gameListRef, {
                confirmed,
                waitlist
            });
        }

        async function updateGameList() {
            const defaultImage = 'https://via.placeholder.com/40';
            confirmedPlayersDiv.innerHTML = confirmedPlayers.length === 0
                ? '<div style="color: var(--muted); padding: 10px;">Nenhum jogador confirmado.</div>'
                : await Promise.all(confirmedPlayers.map(async player => {
                    const imageUrl = player.imageUrl && await validateImageUrl(player.imageUrl) ? player.imageUrl : defaultImage;
                    return `
                        <div class="player-item">
                            <div class="player-info">
                                <img src="${imageUrl}" alt="${player.name}" class="player-photo">
                                <div>
                                    <span class="player-name">${player.name}</span> (${player.category}, ${player.position})
                                    <span class="player-status status-${player.paymentStatus}">
                                        ${player.paymentStatus === 'pago' ? 'Em dia' : 'Pendente'}
                                    </span>
                                </div>
                            </div>
                            ${player.id === currentUserPlayer?.id ? `<button class="player-action" onclick="removePlayer('${player.id}', true)">Remover</button>` : ''}
                        </div>
                    `;
                })).then(html => html.join(''));

            waitlistPlayersDiv.innerHTML = waitlistPlayers.length === 0
                ? '<div style="color: var(--muted); padding: 10px;">Ninguém na lista de espera.</div>'
                : await Promise.all(waitlistPlayers.map(async player => {
                    const imageUrl = player.imageUrl && await validateImageUrl(player.imageUrl) ? player.imageUrl : defaultImage;
                    return `
                        <div class="player-item">
                            <div class="player-info">
                                <img src="${imageUrl}" alt="${player.name}" class="player-photo">
                                <div>
                                    <span class="player-name">${player.name}</span> (${player.category}, ${player.position})
                                    <span class="player-status status-${player.paymentStatus}">
                                        ${player.paymentStatus === 'pago' ? 'Em dia' : 'Pendente'}
                                    </span>
                                </div>
                            </div>
                            ${player.id === currentUserPlayer?.id ? `<button class="player-action" onclick="removePlayer('${player.id}', false)">Remover</button>` : ''}
                        </div>
                    `;
                })).then(html => html.join(''));
        }

        window.removePlayer = removePlayer;
    </script>
</body>
</html>
