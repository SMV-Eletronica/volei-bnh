<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Contribuição-Vôlei BNH</title>
    <link rel="icon" type="image/png" sizes="16x16" href="favicon-16x16.png">
    <link rel="icon" type="image/png" sizes="32x32" href="favicon-32x32.png">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="styles.css?v=1.1">
    <style>
        select {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
        }
        #guestFieldContainer {
            transition: all 0.3s ease;
        }
        .admin-actions {
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
            border: 1px solid #dee2e6;
        }
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }
        .modal-content {
            background-color: white;
            padding: 20px;
            border-radius: 5px;
            width: 90%;
            max-width: 500px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }
        .modal-content h3 {
            margin-top: 0;
        }
        .modal-content .form-group {
            margin-bottom: 15px;
        }
        .modal-content .form-buttons {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
        }
        .modal-content button {
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        .modal-content button.confirm {
            background-color: #f44336;
            color: white;
        }
        .modal-content button.cancel {
            background-color: #ccc;
        }
    </style>
</head>
<body>
    <div class="header">
        <center><h2><i class="fas fa-volleyball-ball" style="color:#3498db;"></i> Vôlei-BNH Gestão</h2></center>
        <div class="button-container">
            <button onclick="window.location.href='dashboard.html'"><i class="fas fa-user-plus"></i> Cadastro</button>            
            <button onclick="window.location.href='mensalidade.html'"><i class="fas fa-hand-holding-usd"></i> Contribuições</button>
            <button onclick="window.location.href='financeiro8.html'"><i class="fas fa-chart-line"></i> Financeiro</button>
            <button onclick="window.location.href='integrantes.html'"><i class="fas fa-users"></i> Integrantes</button>  
            <button onclick="window.location.href='lista.html'"><i class="fas fa-list"></i> Jogos</button>   
            <button id="logoutBtn" class="logout-btn"><i class="fas fa-sign-out-alt"></i> Sair</button>
        </div>
    </div>
    
    <div class="container">
        <div id="userEmail"></div>
        
        <div class="section">
            <h2 class="section-title">Lançamento e Controle de Contribuições</h2>
            
            <div id="message" class="message"></div>
            
            <div class="form-group" style="position: relative;">
                <label for="searchName">Nome do Integrante:</label>
                <input type="text" id="searchName" placeholder="Digite o nome para pesquisar" autocomplete="off">
                <div id="searchResults" class="search-results"></div>
            </div>
        </div>
        
        <div id="playerSection" class="section" style="display: none;">
            <h2 class="section-title"><i class="fas fa-user"></i> Dados do Integrante</h2>
            
            <div class="player-info">
                <img id="playerPhoto" class="player-photo" src="" alt="Foto do jogador" style="display: none;">
                <div class="player-details">
                    <h3 id="playerName"></h3>
                    <p><strong>Posição:</strong> <span id="playerPosition"></span></p>
                    <p><strong>Categoria:</strong> <span id="playerCategory"></span></p>
                    <p><strong>Contato:</strong> <span id="playerContact"></span></p>
                </div>
            </div>
            
            <div class="admin-actions">
                <h3><i class="fas fa-users"></i> Gerar Contribuições Mensais</h3>
                <form id="generateMonthlyForm">
                    <div class="form-group">
                        <label for="generateMonth">Mês/Ano:</label>
                        <input type="month" id="generateMonth" required>
                    </div>
                    <div class="form-group">
                        <label for="generateValue">Valor (R$):</label>
                        <input type="number" id="generateValue" step="0.01" min="0" required>
                    </div>
                    <div class="form-buttons">
                        <button type="submit" id="generateMonthlyBtn" style="background-color: #2196F3;"><i class="fas fa-users"></i> Gerar</button>
                    </div>
                </form>
            </div>
            
            <h3 class="section-title"><i class="fas fa-money-bill-wave"></i> Registrar Pagamentos em Geral</h3>
           
            <form id="paymentForm">
                <div class="form-group">
                    <label for="paymentMonth">Mês/Ano:</label>
                    <input type="month" id="paymentMonth" required>
                </div>
                
                <div class="form-group">
                    <label for="paymentValue">Valor (R$):</label>
                    <input type="number" id="paymentValue" step="0.01" min="0" required>
                </div>
                
                <div class="form-group">
                    <label for="paymentDate">Data do Pagamento:</label>
                    <input type="date" id="paymentDate">
                </div>
                
                <div class="form-group">
                    <label for="paymentType">Destino do Pagamento:</label>
                    <select id="paymentType" required>
                        <option value="">Selecione...</option>
                        <option value="Mensal">Mensal</option>
                        <option value="Diaria">Diária</option>
                        <option value="CONVIDADO">CONVIDADO</option>
                        <option value="Outros">Outros</option>
                    </select>
                </div>

                <div id="guestFieldContainer" class="form-group" style="display: none;">
                    <label for="guestName" id="guestFieldLabel">Nome do Convidado:</label>
                    <input type="text" id="guestName" placeholder="Especifique">
                </div>
                
                <input type="hidden" id="playerId">
                <input type="hidden" id="editingPaymentId">
                <input type="hidden" id="editingPaymentYear">
                <input type="hidden" id="editingPaymentMonth">
                
                <div class="form-buttons">
                    <button type="submit" id="savePaymentBtn" style="background-color: #4CAF50;"><i class="fas fa-save"></i> Registrar</button>
                    <button type="button" id="cancelEditBtn" style="display: none; background-color: #ff5722;"><i class="fas fa-times"></i> Cancelar</button>
                    <button type="button" id="deletePaymentBtn" style="display: none; background-color: #f44336;"><i class="fas fa-trash-alt"></i> Excluir</button>
                </div>
            </form>
        </div>
        
        <div id="paymentsSection" class="section" style="display: none;">
            <h2 class="section-title"><i class="fas fa-history"></i> Histórico de Contribuições </h2>
            
            <div id="paymentsList">
                <table>
                    <thead>
                        <tr>
                            <th>Mês/Ano</th>
                            <th>Valor</th>
                            <th>Data do Pagamento</th>
                            <th>Tipo</th>
                            <th>Status</th>
                            <th>Razão da Exclusão</th>
                            <th>Excluído por</th>
                        </tr>
                    </thead>
                    <tbody id="paymentsTableBody">
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div id="deleteModal" class="modal">
        <div class="modal-content">
            <h3>Justificativa de Exclusão</h3>
            <form id="deleteReasonForm">
                <div class="form-group">
                    <label for="deleteReason">Motivo da exclusão:</label>
                    <textarea id="deleteReason" required rows="4" style="width: 100%;"></textarea>
                </div>
                <div class="form-group">
                    <label for="deletedBy">Excluído por:</label>
                    <input type="text" id="deletedBy" readonly>
                </div>
                <div class="form-buttons">
                    <button id="confirmDeleteBtn" type="submit" class="confirm"><i class="fas fa-check"></i> Confirmar</button>
                    <button type="button" class="cancel" onclick="document.getElementById('deleteModal').style.display='none'"><i class="fas fa-times"></i> Cancelar</button>
                </div>
            </form>
        </div>
    </div>

    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signOut, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getDatabase, ref, set, get, push, remove, update } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-database.js";
        
        const firebaseConfig = {
            apiKey: "AIzaSyAWMgLaPMpNOdPW10S-bVVEiQW-r3QCkxg",
            authDomain: "volei-25301.firebaseapp.com",
            databaseURL: "https://volei-25301-default-rtdb.firebaseio.com",
            projectId: "volei-25301",
            storageBucket: "volei-25301.firebasestorage.app",
            messagingSenderId: "1007197261034",
            appId: "1:1007197261034:web:f2c7ab9cb2793a694cdb93",
            measurementId: "G-CYMLX0SJJQ"
        };

        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const database = getDatabase(app);

        const searchNameInput = document.getElementById('searchName');
        const searchResultsDiv = document.getElementById('searchResults');
        const playerSection = document.getElementById('playerSection');
        const playerPhoto = document.getElementById('playerPhoto');
        const playerNameSpan = document.getElementById('playerName');
        const playerPositionSpan = document.getElementById('playerPosition');
        const playerCategorySpan = document.getElementById('playerCategory');
        const playerContactSpan = document.getElementById('playerContact');
        const paymentForm = document.getElementById('paymentForm');
        const paymentMonthInput = document.getElementById('paymentMonth');
        const paymentValueInput = document.getElementById('paymentValue');
        const paymentDateInput = document.getElementById('paymentDate');
        const paymentTypeSelect = document.getElementById('paymentType');
        const guestFieldContainer = document.getElementById('guestFieldContainer');
        const guestNameInput = document.getElementById('guestName');
        const guestFieldLabel = document.getElementById('guestFieldLabel');
        const playerIdInput = document.getElementById('playerId');
        const editingPaymentIdInput = document.getElementById('editingPaymentId');
        const editingPaymentYearInput = document.getElementById('editingPaymentYear');
        const editingPaymentMonthInput = document.getElementById('editingPaymentMonth');
        const paymentsSection = document.getElementById('paymentsSection');
        const paymentsTableBody = document.getElementById('paymentsTableBody');
        const messageDiv = document.getElementById('message');
        const savePaymentBtn = document.getElementById('savePaymentBtn');
        const generateMonthlyForm = document.getElementById('generateMonthlyForm');
        const generateMonthlyBtn = document.getElementById('generateMonthlyBtn');
        const generateMonthInput = document.getElementById('generateMonth');
        const generateValueInput = document.getElementById('generateValue');
        const cancelEditBtn = document.getElementById('cancelEditBtn');
        const deletePaymentBtn = document.getElementById('deletePaymentBtn');
        const deleteModal = document.getElementById('deleteModal');
        const deleteReasonForm = document.getElementById('deleteReasonForm');
        const deleteReasonInput = document.getElementById('deleteReason');
        const deletedByInput = document.getElementById('deletedBy');
        const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');

        paymentDateInput.valueAsDate = new Date();

        onAuthStateChanged(auth, (user) => {
            if (!user) {
                window.location.href = 'index.html';
            } else {
                document.getElementById('userEmail').textContent = `Logado como: ${user.email}`;
                deletedByInput.value = user.email;
                loadFirstPlayerAlphabetically();
            }
        });

        document.getElementById('logoutBtn').addEventListener('click', () => {
            signOut(auth).then(() => {
                window.location.href = 'index.html';
            }).catch((error) => {
                console.error('Error signing out:', error);
            });
        });

        async function loadFirstPlayerAlphabetically() {
            try {
                const playersRef = ref(database, 'players');
                const snapshot = await get(playersRef);
                
                if (snapshot.exists()) {
                    const players = snapshot.val();
                    const playersArray = Object.keys(players).map(key => ({
                        id: key,
                        ...players[key]
                    }));
                    
                    playersArray.sort((a, b) => a.name.localeCompare(b.name));
                    
                    if (playersArray.length > 0) {
                        selectPlayer(playersArray[0].id, playersArray[0]);
                    }
                }
            } catch (error) {
                console.error("Error loading first player:", error);
            }
        }

        paymentTypeSelect.addEventListener('change', () => {
            console.log('paymentTypeSelect changed:', paymentTypeSelect.value);
            if (paymentTypeSelect.value === 'CONVIDADO') {
                guestFieldLabel.textContent = 'Nome do Convidado:';
                guestNameInput.placeholder = 'Digite o nome do convidado';
                guestFieldContainer.style.display = 'block';
            } else if (paymentTypeSelect.value === 'Outros') {
                guestFieldLabel.textContent = 'Especificação:';
                guestNameInput.placeholder = 'Digite a razão do pagamento';
                guestFieldContainer.style.display = 'block';
            } else {
                guestFieldContainer.style.display = 'none';
                guestNameInput.value = '';
            }
        });

        searchNameInput.addEventListener('input', async () => {
            const searchTerm = searchNameInput.value.trim().toLowerCase();
            
            if (searchTerm.length < 2) {
                searchResultsDiv.style.display = 'none';
                return;
            }
            
            try {
                const playersRef = ref(database, 'players');
                const snapshot = await get(playersRef);
                searchResultsDiv.innerHTML = '';
                
                if (snapshot.exists()) {
                    const players = snapshot.val();
                    let hasResults = false;
                    
                    Object.keys(players).forEach((key) => {
                        const player = players[key];
                        if (player.name.toLowerCase().includes(searchTerm)) {
                            hasResults = true;
                            const playerItem = document.createElement('div');
                            playerItem.className = 'search-item';
                            playerItem.innerHTML = `
                                ${player.imageUrl ? `<img src="${player.imageUrl}" class="search-item-photo" alt="${player.name}">` : '<div class="search-item-photo" style="background:#eee;"></div>'}
                                <span>${player.name}</span>
                            `;
                            playerItem.addEventListener('click', () => {
                                selectPlayer(key, player);
                                searchResultsDiv.style.display = 'none';
                                searchNameInput.value = player.name;
                            });
                            searchResultsDiv.appendChild(playerItem);
                        }
                    });
                    
                    searchResultsDiv.style.display = hasResults ? 'block' : 'none';
                } else {
                    searchResultsDiv.style.display = 'none';
                }
            } catch (error) {
                console.error("Error searching players:", error);
                showMessage("Erro ao pesquisar integrantes: " + error.message, "error");
            }
        });

        document.addEventListener('click', (e) => {
            if (e.target !== searchNameInput) {
                searchResultsDiv.style.display = 'none';
            }
        });

        generateMonthlyForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            if (!generateMonthInput.value || !generateValueInput.value) {
                showMessage("Por favor, preencha o Mês/Ano e o Valor antes de gerar as dívidas.", "error");
                return;
            }

            if (!confirm("Deseja realmente gerar dívidas para todos os integrantes da categoria Mensal?")) {
                return;
            }

            try {
                const playersRef = ref(database, 'players');
                const playersSnapshot = await get(playersRef);
                const players = playersSnapshot.val();
                const [year, month] = generateMonthInput.value.split('-');
                const debtValue = parseFloat(generateValueInput.value);
                let createdCount = 0;

                for (const [playerId, player] of Object.entries(players)) {
                    if (player.category === 'MENSAL') {
                        const paymentsRef = ref(database, `payments/${year}/${month}`);
                        const paymentsSnapshot = await get(paymentsRef);
                        const payments = paymentsSnapshot.val() || {};

                        let paymentExists = false;
                        for (const payment of Object.values(payments)) {
                            if (payment.playerId === playerId && payment.paymentType === 'Mensal') {
                                paymentExists = true;
                                break;
                            }
                        }

                        if (!paymentExists) {
                            const newPaymentRef = push(ref(database, `payments/${year}/${month}`));
                            await set(newPaymentRef, {
                                month: `${year}-${month}`,
                                value: debtValue,
                                date: null,
                                playerId: playerId,
                                playerName: player.name,
                                paymentType: 'Mensal',
                                createdAt: new Date().toISOString()
                            });
                            createdCount++;
                        }
                    }
                }

                showMessage(`Dívidas geradas com sucesso para ${createdCount} integrantes mensais!`, "success");
                if (playerIdInput.value) {
                    loadPayments(playerIdInput.value);
                }
                generateMonthlyForm.reset();
            } catch (error) {
                console.error("Error generating monthly debts:", error);
                showMessage("Erro ao gerar dívidas: " + error.message, "error");
            }
        });

        function selectPlayer(playerId, playerData) {
            console.log('Selecting player:', playerId, playerData.name);
            playerNameSpan.textContent = playerData.name;
            playerPositionSpan.textContent = playerData.position;
            playerCategorySpan.textContent = playerData.category;
            playerContactSpan.textContent = playerData.contact;
            playerIdInput.value = playerId;
            
            if (playerData.imageUrl) {
                playerPhoto.src = playerData.imageUrl;
                playerPhoto.style.display = 'block';
            } else {
                playerPhoto.style.display = 'none';
            }
            
            playerSection.style.display = 'block';
            paymentsSection.style.display = 'block';
            
            resetForm();
            loadPayments(playerId);
        }

        paymentForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            console.log('Submitting payment form');

            const year = editingPaymentIdInput.value ? editingPaymentYearInput.value : paymentMonthInput.value.split('-')[0];
            const month = editingPaymentIdInput.value ? editingPaymentMonthInput.value : paymentMonthInput.value.split('-')[1];
            const paymentData = {
                month: paymentMonthInput.value,
                value: parseFloat(paymentValueInput.value),
                date: paymentValueInput.value > 0 && paymentDateInput.value ? paymentDateInput.value : null,
                playerId: playerIdInput.value,
                playerName: playerNameSpan.textContent,
                paymentType: paymentTypeSelect.value,
                createdAt: new Date().toISOString()
            };

            if (paymentTypeSelect.value === 'CONVIDADO' || paymentTypeSelect.value === 'Outros') {
                paymentData.additionalInfo = guestNameInput.value;
            }

            try {
                if (editingPaymentIdInput.value) {
                    console.log('Updating payment:', editingPaymentIdInput.value, year, month);
                    await update(ref(database, `payments/${year}/${month}/${editingPaymentIdInput.value}`), paymentData);
                    showMessage("Pagamento atualizado com sucesso!", "success");
                } else {
                    console.log('Creating new payment:', year, month);
                    const newPaymentRef = push(ref(database, `payments/${year}/${month}`));
                    await set(newPaymentRef, paymentData);
                    showMessage("Pagamento registrado com sucesso!", "success");
                }

                resetForm();
                paymentDateInput.valueAsDate = new Date();
                loadPayments(playerIdInput.value);
            } catch (error) {
                console.error("Error saving payment:", error);
                showMessage("Erro ao registrar pagamento: " + error.message, "error");
            }
        });

        cancelEditBtn.addEventListener('click', () => {
            console.log('Canceling edit');
            resetForm();
        });

        deletePaymentBtn.addEventListener('click', () => {
            console.log('Delete button clicked. Payment ID:', editingPaymentIdInput.value, 'Year:', editingPaymentYearInput.value, 'Month:', editingPaymentMonthInput.value);
            if (editingPaymentIdInput.value && editingPaymentYearInput.value && editingPaymentMonthInput.value) {
                deleteModal.style.display = 'flex';
                deleteReasonForm.onsubmit = async (e) => {
                    e.preventDefault();
                    console.log('Submitting delete reason form');

                    if (confirmDeleteBtn) {
                        confirmDeleteBtn.disabled = true;
                        confirmDeleteBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processando...';
                    }

                    const reason = deleteReasonInput.value.trim();
                    const deletedBy = deletedByInput.value.trim();

                    if (!reason) {
                        showMessage("Por favor, preencha o motivo da exclusão.", "error");
                        if (confirmDeleteBtn) {
                            confirmDeleteBtn.disabled = false;
                            confirmDeleteBtn.innerHTML = '<i class="fas fa-check"></i> Confirmar';
                        }
                        return;
                    }

                    try {
                        await deletePayment(
                            editingPaymentIdInput.value,
                            reason,
                            deletedBy,
                            editingPaymentYearInput.value,
                            editingPaymentMonthInput.value
                        );
                        if (confirmDeleteBtn) {
                            confirmDeleteBtn.disabled = false;
                            confirmDeleteBtn.innerHTML = '<i class="fas fa-check"></i> Confirmar';
                        }
                        deleteModal.style.display = 'none';
                        deleteReasonForm.reset();
                        deletedByInput.value = auth.currentUser ? auth.currentUser.email : '';
                    } catch (error) {
                        console.error("Error deleting payment:", error);
                        showMessage("Erro ao excluir pagamento: " + error.message, "error");
                        if (confirmDeleteBtn) {
                            confirmDeleteBtn.disabled = false;
                            confirmDeleteBtn.innerHTML = '<i class="fas fa-check"></i> Confirmar';
                        }
                    }
                };
            } else {
                showMessage("Nenhum pagamento selecionado para exclusão.", "error");
            }
        });

        function resetForm() {
            console.log('Resetting form');
            paymentForm.reset();
            editingPaymentIdInput.value = '';
            editingPaymentYearInput.value = '';
            editingPaymentMonthInput.value = '';
            guestFieldContainer.style.display = 'none';
            guestNameInput.value = '';
            savePaymentBtn.innerHTML = '<i class="fas fa-save"></i> Registrar';
            cancelEditBtn.style.display = 'none';
            deletePaymentBtn.style.display = 'none';
            paymentDateInput.valueAsDate = new Date();
        }

        function loadPayments(playerId) {
            console.log('Loading payments for player:', playerId);
            paymentsTableBody.innerHTML = '';
            let playerPayments = [];

            const loadActivePayments = async () => {
                const paymentsRef = ref(database, 'payments');
                const snapshot = await get(paymentsRef);
                if (snapshot.exists()) {
                    const years = snapshot.val();
                    for (const year in years) {
                        for (const month in years[year]) {
                            const payments = years[year][month];
                            for (const [paymentId, payment] of Object.entries(payments)) {
                                if (payment.playerId === playerId) {
                                    // Normaliza o formato do mês
                                    const normalizedMonth = month.includes('-') ? month.split('-')[1] : month.padStart(2, '0');
                                    playerPayments.push({ id: paymentId, year, month: normalizedMonth, ...payment, isDeleted: false });
                                }
                            }
                        }
                    }
                }
            };

            const loadDeletedPayments = async () => {
                const deletedPaymentsRef = ref(database, 'deletedPayments');
                const snapshot = await get(deletedPaymentsRef);
                if (snapshot.exists()) {
                    const deletedPayments = snapshot.val();
                    for (const [paymentId, payment] of Object.entries(deletedPayments)) {
                        if (payment.playerId === playerId) {
                            playerPayments.push({ id: paymentId, ...payment, isDeleted: true });
                        }
                    }
                }
            };

            Promise.all([loadActivePayments(), loadDeletedPayments()])
                .then(() => {
                    console.log('Payments loaded:', playerPayments.length);
                    playerPayments.sort((a, b) => b.month.localeCompare(a.month));
                    playerPayments.forEach((payment) => {
                        const isInadimplente = !payment.isDeleted && !payment.date && payment.value > 0;
                        const row = document.createElement('tr');
                        row.setAttribute('data-id', payment.id);
                        row.innerHTML = `
                            <td>${formatMonthYear(payment.month)}</td>
                            <td>${parseFloat(payment.value).toFixed(2)}</td>
                            <td>${payment.date ? formatDate(payment.date) : '-'}</td>
                            <td>${payment.paymentType || 'Mensal'}</td>
                            <td class="${payment.isDeleted ? 'status-excluido' : (isInadimplente ? 'status-inadimplente' : 'status-pago')}">
                                ${payment.isDeleted ? 'Excluído' : (isInadimplente ? 'Inadimplente' : 'Pago')}
                            </td>
                            <td>${payment.deleteReason || '-'}</td>
                            <td>${payment.deletedBy || '-'}</td>
                        `;
                        if (!payment.isDeleted) {
                            row.addEventListener('click', () => {
                                console.log('Row clicked:', payment.id, payment.year, payment.month);
                                editPayment(payment.id, payment.year, payment.month);
                            });
                        }
                        paymentsTableBody.appendChild(row);
                    });
                })
                .catch((error) => {
                    console.error("Error loading payments:", error);
                    showMessage("Erro ao carregar pagamentos: " + error.message, "error");
                });
        }

        async function editPayment(paymentId, year, month) {
            console.log('Editing payment:', paymentId, year, month);
            // Normaliza o formato do mês para o caminho do Firebase
            const normalizedMonth = month.includes('-') ? month.split('-')[1] : month.padStart(2, '0');
            console.log('Normalized path:', `payments/${year}/${normalizedMonth}/${paymentId}`);
            try {
                const paymentRef = ref(database, `payments/${year}/${normalizedMonth}/${paymentId}`);
                const snapshot = await get(paymentRef);
                
                if (snapshot.exists()) {
                    const paymentData = snapshot.val();
                    console.log('Payment data:', paymentData);
                    
                    paymentMonthInput.value = paymentData.month;
                    paymentValueInput.value = paymentData.value;
                    paymentDateInput.value = paymentData.date || '';
                    paymentTypeSelect.value = paymentData.paymentType || '';
                    editingPaymentIdInput.value = paymentId;
                    editingPaymentYearInput.value = year;
                    editingPaymentMonthInput.value = normalizedMonth;
                    
                    if (paymentData.paymentType === 'CONVIDADO' || paymentData.paymentType === 'Outros') {
                        guestFieldContainer.style.display = 'block';
                        guestNameInput.value = paymentData.additionalInfo || '';
                        guestFieldLabel.textContent = paymentData.paymentType === 'CONVIDADO' ? 'Nome do Convidado:' : 'Especificação:';
                        guestNameInput.placeholder = paymentData.paymentType === 'CONVIDADO' ? 'Digite o nome do convidado' : 'Digite a razão do pagamento';
                    } else {
                        guestFieldContainer.style.display = 'none';
                    }
                    
                    savePaymentBtn.innerHTML = '<i class="fas fa-sync-alt"></i> Atualizar';
                    cancelEditBtn.style.display = 'inline-block';
                    deletePaymentBtn.style.display = 'inline-block';
                    paymentForm.scrollIntoView({ behavior: 'smooth' });
                } else {
                    console.error('Payment not found at:', `payments/${year}/${normalizedMonth}/${paymentId}`);
                    showMessage("Pagamento não encontrado. Verifique se os dados foram migrados corretamente para payments/ano/mês.", "error");
                }
            } catch (error) {
                console.error("Error loading payment for edit:", error);
                showMessage("Erro ao carregar pagamento para edição: " + error.message, "error");
            }
        }

        async function deletePayment(paymentId, reason, deletedBy, year, month) {
            console.log('Deleting payment:', paymentId, year, month);
            // Normaliza o formato do mês
            const normalizedMonth = month.includes('-') ? month.split('-')[1] : month.padStart(2, '0');
            try {
                const paymentRef = ref(database, `payments/${year}/${normalizedMonth}/${paymentId}`);
                const snapshot = await get(paymentRef);
                
                if (snapshot.exists()) {
                    const paymentData = snapshot.val();
                    const deletedPaymentRef = push(ref(database, 'deletedPayments'));
                    await set(deletedPaymentRef, {
                        ...paymentData,
                        deleteReason: reason,
                        deletedBy: deletedBy,
                        deletedAt: new Date().toISOString()
                    });
                    await remove(paymentRef);
                    showMessage("Pagamento excluído com sucesso!", "success");
                    
                    if (editingPaymentIdInput.value === paymentId) {
                        resetForm();
                    }
                    loadPayments(playerIdInput.value);
                } else {
                    console.error('Payment not found at:', `payments/${year}/${normalizedMonth}/${paymentId}`);
                    showMessage("Pagamento não encontrado.", "error");
                }
            } catch (error) {
                console.error("Error deleting payment:", error);
                showMessage("Erro ao excluir pagamento: " + error.message, "error");
            }
        }

        function formatDate(dateString) {
            if (!dateString) return '-';
            const date = new Date(dateString);
            const offset = date.getTimezoneOffset() * 60000;
            const adjustedDate = new Date(date.getTime() + offset);
            return adjustedDate.toLocaleDateString('pt-BR');
        }

        function formatMonthYear(monthYear) {
            const [year, month] = monthYear.split('-');
            const monthNames = ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho',
                              'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'];
            return `${monthNames[parseInt(month) - 1]} ${year}`;
        }

        function showMessage(message, type) {
            console.log('Showing message:', type, message);
            messageDiv.textContent = message;
            messageDiv.className = `message ${type}`;
            messageDiv.style.display = 'block';
            setTimeout(() => {
                messageDiv.style.display = 'none';
            }, 5000);
        }
    </script>
</body>
</html>
